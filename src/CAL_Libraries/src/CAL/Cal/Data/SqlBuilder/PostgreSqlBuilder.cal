/* 
 * Cal.Data.SqlBuilder.PostgreSqlBuilder
 * A SqlBuilder implementation for PostgreSQL databases.
 * 
 * Orig Author: Richard Webster
 * 
 * Copyright (C) 2010 - Indicee Inc.   All Rights Reserved
 * 
 *     Redistribution and use in source and binary forms, with or without
 *     modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * The names of the authors and contributors may be used to endorse or promote 
 *       products derived from this software without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * A SqlBuilder implementation for PostgreSQL databases.
 */
module Cal.Data.SqlBuilder.PostgreSqlBuilder;

import Cal.Core.Prelude using
    function = empty, error, intToString, isEmpty, not;
    typeConstructor = Boolean, Maybe, String;
    dataConstructor = False, True, Nothing, Just;
    ;

import Cal.Data.Sql using
    typeConstructor = AlterTableAction, DbFunction, Expr, SqlBuilder, SqlBuilderState;
    function = expressionText2;
    dataConstructor = AlterTableAction_AddIndex, AlterTableAction_DropIndex, AlterTableAction_ModifyColumnType;
    ;

import Cal.Data.SqlBuilder.DefaultSqlBuilder using
    function = defaultSqlBuilderFunctions, quoteIdentifierHelper, quotesNeeded_allowUppercaseOnly;
    ;

import Cal.Utilities.PrettyPrinter using
    typeConstructor = Document;
    function = singleSpace, spread, text;
    ;

import Cal.Utilities.Time using
    typeConstructor = Time;
    ;

import Cal.Utilities.TimeZone using
    typeConstructor = TimeZone;
    ;

import Cal.Data.SqlType using
    typeConstructor = SqlType;
    dataConstructor =
        SqlType_TinyInt, SqlType_SmallInt, SqlType_Integer, SqlType_BigInt, SqlType_Decimal, SqlType_Numeric, SqlType_Real,
        SqlType_Float, SqlType_Double, SqlType_Bit, SqlType_Boolean, SqlType_Char, SqlType_VarChar, SqlType_LongVarChar,
        SqlType_Clob, SqlType_Binary, SqlType_VarBinary, SqlType_LongVarBinary, SqlType_Blob, SqlType_Date, SqlType_Time,
        SqlType_TimeStamp;
    ;

import Cal.Utilities.Locale;

import Cal.Core.Debug using
    function = show;
    ;

import Cal.Collections.List;

import Cal.Data.DatabaseMetadata using
    typeConstructor = TableConstraint, TableDescription, TableIndex, TableReference;
    function =
        getTableConstraints, getTableFields, getTableIndexes, getTableNameFromReference, getTableReference, makeTableDescription;
    dataConstructor = PrimaryKeyConstraint, UniqueConstraint, ForeignKeyConstraint, TableIndex;
    ;

import Cal.Collections.Set using
    typeConstructor = Set;
    ;

import Cal.Utilities.StringNoCase using
    typeConstructor = StringNoCase;
    ;



/**
 * A SqlBuilder implementation for PostgreSQL databases.
 *
 * The SQL builder for PostgreSQL differs from the default SQL builder in that:
 * 1. Identifiers are quoted using double-quotes.
 * 2. Generates timestamps in the following form:  '2005-05-20 13:23:45.0'.
 * 3. TRUE and FALSE are used for Boolean literals.
 * 4. Some functions unsupported, including SoundEx, Difference, etc.
 * 5. String concatenation operator is ||.
 * 6. Bitwise XOR operator is #.
 * 7. SQL type names are customized for PostgreSQL.
 * 8. Postgres names used for various functions (including LN, LOG, RANDOM, TRUNC, CHR, LOWER, UPPER, STDDEV_SAMP, STDDEV_POP, etc.)
 */
postgreSqlBuilder :: SqlBuilder;
public postgreSqlBuilder = Sql.makeSqlBuilder postgreSqlBuilderFunctions;

/**
 * The SqlBuilder functions for PostgreSQL.
 */
public postgreSqlBuilderFunctions = 
            { defaultSqlBuilderFunctions | 
                    quoteIdentifier           := postgreSql_quoteIdentifier,
                    timeToSql                 := postgreSql_timeToSql,
                    booleanToSql              := postgreSql_booleanToSql,
                    functionToSql             := postgreSql_functionToSql,
                    addParensForZeroArgFunc   := postgreSql_addParensForZeroArgFunc,
                    functionName              := postgreSql_functionNameText,
                    operatorText              := postgreSql_operatorText,
                    buildFieldType            := postgreSql_buildFieldType,
                    buildCreateTableStatement := postgreSql_buildCreateTableStatement,
                    buildDropTableStatement   := postgreSql_buildDropTableStatement,
                    buildAlterTableStatement  := postgreSql_buildAlterTableStatement,
                    buildAlterTableAction     := postgreSql_buildAlterTableAction,
                    buildOrderByClause        := DefaultSqlBuilder.buildOrderByClause True "ASC NULLS FIRST" "DESC NULLS LAST",
                    buildGroupByClause        := DefaultSqlBuilder.buildGroupByClause True,
                    buildTableConstraint      := postgreSq_buildTableConstraint
            };

/**
 * The double-quote character is used for quoting identifiers and this is also best to quote identifiers with lower case letters.
 */
postgreSql_quoteIdentifier :: String -> Document;
postgreSql_quoteIdentifier = quoteIdentifierHelper quotesNeeded_allowUppercaseOnly "\"" "\"";


postgreSql_functionToSql :: SqlBuilder -> SqlBuilderState -> DbFunction -> [Expr] -> Document;
postgreSql_functionToSql builder builderState func arguments = 
    let
        arg1Text = expressionText2 builder builderState $ List.head arguments;
        
        postgreSql_datePartText :: String -> Document;
        postgreSql_datePartText datePartString = 
            text ("EXTRACT (" ++ datePartString ++ " FROM ") ++ arg1Text ++ text ")";
    in
        case func of
        Sql.YearFunction       -> postgreSql_datePartText "year";
        Sql.QuarterFunction    -> postgreSql_datePartText "quarter";
        Sql.MonthFunction      -> postgreSql_datePartText "month";
        Sql.DayOfMonthFunction -> postgreSql_datePartText "day";
        Sql.HourFunction       -> postgreSql_datePartText "hour";
        Sql.MinuteFunction     -> postgreSql_datePartText "minute";
        Sql.SecondFunction     -> postgreSql_datePartText "second";
        Sql.DayOfWeekFunction  -> postgreSql_datePartText "dow";
        Sql.DayOfYearFunction  -> postgreSql_datePartText "doy";
        Sql.WeekFunction       -> postgreSql_datePartText "week";
//        Sql.MonthNameFunction  -> ?;
//        Sql.DayNameFunction    -> ?;
        
        Sql.ConvertToStringFunction -> text "CAST(" ++ arg1Text ++ text " AS text)";
        Sql.ConvertToIntFunction    -> text "CAST(" ++ arg1Text ++ text " AS int)";
        Sql.ConvertToDoubleFunction -> text "CAST(" ++ arg1Text ++ text " AS double precision)";
        
        Sql.LocateFunction -> 
            // Postgres has the 'strpos' function, but the arguments are in the other order from Locate. 
            defaultSqlBuilderFunctions.functionToSql builder builderState (Sql.FunctionOther "strpos") $ List.reverse arguments;
        
        _ ->
            defaultSqlBuilderFunctions.functionToSql builder builderState func arguments;
        ;

/* Functions
    InsertFunction  -> error unsupported???
    LeftFunction    -> perhap use: substr(string, from [, count])
    RightFunction   -> perhap use: substr(string, from [, count])
    
    SpaceFunction   -> use repeat with a space char?
    SubstringFunction -> substr(string, from [, count])
    
    DayNameFunction -> unsupported?
    MonthNameFunction -> unsupported?
    
    DateTimeAddFunction {} -> use interval math?
    DateTimeDiffFunction {} -> ???
*/

/** Postgres requires parens for some zero-arg functions, but doesn't allow it for others. */
postgreSql_addParensForZeroArgFunc :: Sql.DbFunction -> Boolean;
postgreSql_addParensForZeroArgFunc !func = 
    not $ Set.member (StringNoCase.fromString $ postgreSql_functionNameText func) noParenFunctionNames;

/** The following zero-arg functions must NOT include parens in Postgres. All others must include parens. */
noParenFunctionNames :: Set StringNoCase;
noParenFunctionNames = 
    Set.fromListWith StringNoCase.fromString 
                     ["current_date",
                      "current_time",
                      "current_timestamp",
                      "localtime",
                      "localtimestamp"
                     ];

postgreSql_functionNameText :: DbFunction -> String;
postgreSql_functionNameText func =
    case func of
    Sql.LogFunction      -> "LN";
    Sql.Log10Function    -> "LOG";
    Sql.RandFunction     -> "RANDOM";
    Sql.TruncateFunction -> "TRUNC";
    Sql.CharFunction     -> "CHR";
    Sql.LcaseFunction    -> "LOWER";
    Sql.UcaseFunction    -> "UPPER";
    Sql.DatabaseFunction -> "CURRENT_DATABASE";
    Sql.IfNullFunction   -> "COALESCE";
    Sql.NowFunction      -> "CURRENT_TIMESTAMP";
    Sql.AggrStdDev       -> "STDDEV_SAMP";
    Sql.AggrStdDevP      -> "STDDEV_POP";
    Sql.AggrVar          -> "VAR_SAMP";
    Sql.AggrVarP         -> "VAR_POP";
    
    Sql.DifferenceFunction -> 
        // PostgreSQL doesn't support the SoundEx Difference function.
        error ("Unsupported function 'DIFFERENCE'");
    Sql.SoundexFunction    -> 
        // PostgreSQL doesn't support the SoundEx function.
        error ("Unsupported function 'SOUNDEX'");
    _ ->
        defaultSqlBuilderFunctions.functionName func;
    ;
            
postgreSql_operatorText :: DbFunction -> String;
postgreSql_operatorText operator =
    case operator of
    Sql.OpMod    -> "%";
    Sql.OpCat    -> "||";
    Sql.OpBitXor -> "#";
    _ -> defaultSqlBuilderFunctions.operatorText operator;
    ;


/**
* Generates timestamps in the following form:  TIMESTAMP '2005-05-20 13:23:45.0'
*/
postgreSql_timestampPattern :: String;
postgreSql_timestampPattern = "'TIMESTAMP' ''yyyy-MM-dd HH:mm:ss.S''";

postgreSql_timeToSql :: Time -> TimeZone -> Document;
postgreSql_timeToSql timeVal timeZone = 
    text (Time.formatTime timeVal timeZone Time.gregorianCalendar postgreSql_timestampPattern Locale.defaultLocale);

postgreSql_booleanToSql :: Boolean -> Document;
postgreSql_booleanToSql !boolVal =
    text (if boolVal then "TRUE" else "FALSE");


postgreSql_buildFieldType :: SqlType -> Document;
postgreSql_buildFieldType !dataType = 
    case dataType of
    SqlType_TinyInt            -> text $ "smallint";        // PostgreSQL doesn't seem to have a TinyInt type, so use the SmallInt type instead.
    SqlType_SmallInt           -> text $ "smallint";
    SqlType_Integer            -> text $ "integer";
    SqlType_BigInt             -> text $ "bigint";
    SqlType_Decimal {precision, scale} -> text $ "decimal(" ++ intToString precision ++ ", " ++ intToString scale ++ ")";
    SqlType_Numeric {precision, scale} -> text $ "numeric(" ++ intToString precision ++ ", " ++ intToString scale ++ ")";
    SqlType_Real               -> text $ "real";
    SqlType_Float              -> text $ "real";
    SqlType_Double             -> text $ "double precision";
    SqlType_Bit                -> text $ "bit";             // Is this correct?
    SqlType_Boolean            -> text $ "boolean";
    SqlType_Char {length}      -> text $ "char(" ++ intToString length ++ ")";
    SqlType_VarChar {length}   -> text $ "varchar(" ++ intToString length ++ ")";
    SqlType_LongVarChar        -> text $ "text";
    SqlType_Clob               -> text $ "text";
    SqlType_Binary {length}    -> text $ "bit(" ++ intToString length ++ ")";
    SqlType_VarBinary {length} -> text $ "varbit(" ++ intToString length ++ ")";
    SqlType_LongVarBinary      -> text $ "bytea";
    SqlType_Blob               -> text $ "bytea";
    SqlType_Date               -> text $ "date";
    SqlType_Time               -> text $ "time";
    SqlType_TimeStamp          -> text $ "timestamp";
    _ -> error ("Unsupported data type '" ++ show dataType ++ "'.");
    ;

postgreSql_buildCreateTableStatement :: SqlBuilder -> TableDescription -> Boolean -> Boolean -> Document;
postgreSql_buildCreateTableStatement !builder !tableDesc !isTemporary !skipIfTableExists = 
    let
        skipIfExistsText :: Maybe Document;
        skipIfExistsText = if skipIfTableExists then Just (text "IF NOT EXISTS") else Nothing;
        
        // PostgreSQL doesn't allow non-unique indexes to created as part of the CREATE TABLE statement.
        // Add them separately using CREATE INDEX.
        tableDescNoIndexes = makeTableDescription (getTableReference tableDesc) (getTableFields tableDesc) (getTableConstraints tableDesc);
        tableIndexes = getTableIndexes tableDesc;
        
        createTableDoc = DefaultSqlBuilder.buildCreateTableStatement Nothing skipIfExistsText Nothing builder tableDescNoIndexes isTemporary False;
        
        createIndexDoc :: TableIndex -> Document;
        createIndexDoc !tableIndex = 
            text "CREATE INDEX ON " ++ Sql.quoteIdentifier builder (DatabaseMetadata.getTableName tableDesc) 
            ++ text " (" ++ List.join (text ", ") (List.map (Sql.quoteIdentifier builder) tableIndex.TableIndex.indexFieldNames) ++ text ")";
    in
        Sql.buildCompoundStatement builder $ createTableDoc : List.map createIndexDoc tableIndexes;
        

postgreSql_buildDropTableStatement :: SqlBuilder -> TableReference -> Boolean -> Boolean -> Document;
postgreSql_buildDropTableStatement !builder !tableRef !isTemporary !onlyIfTableExists = 
    let
        ifExistsText :: String;
        ifExistsText = if onlyIfTableExists then " IF EXISTS" else "";
    in
        text "DROP TABLE" ++ text ifExistsText ++ singleSpace ++ Sql.quoteIdentifier builder (getTableNameFromReference tableRef);

postgreSql_buildAlterTableStatement :: SqlBuilder -> TableReference -> [AlterTableAction] -> Document;
postgreSql_buildAlterTableStatement !builder !tableRef !alterTableActions = 
    let
        // Split out any Create/Drop Index actions (as these cannot be done using ALTER TABLE in PostgreSQL).
        addIndexActions :: [AlterTableAction];
        (addIndexActions, otherActions1) = List.partition (\!action -> case action of AlterTableAction_AddIndex {} -> True; _ -> False;) alterTableActions;
        (dropIndexActions, otherActions) = List.partition (\!action -> case action of AlterTableAction_DropIndex {} -> True; _ -> False;) otherActions1;
        
        addIndexDoc :: AlterTableAction -> Document;
        addIndexDoc !createIndexAction = 
            case createIndexAction of
            AlterTableAction_AddIndex {indexName, indexColumnNames} -> 
                let
                    nameText = 
                        case indexName of
                        Nothing -> "";
                        Just name -> " " ++ name;
                        ;
                in
                    text "CREATE INDEX" ++ text nameText ++ text " ON " ++ Sql.quoteIdentifier builder (getTableNameFromReference tableRef) ++ 
                    text " (" ++ List.join (text ", ") (List.map (Sql.quoteIdentifier builder) indexColumnNames) ++ text ")";
            ;
        
        dropIndexDoc :: AlterTableAction -> Document;
        dropIndexDoc !dropIndexAction = 
            case dropIndexAction of
            AlterTableAction_DropIndex {indexName} -> 
                text "DROP INDEX " ++ Sql.quoteIdentifier builder indexName;
            ;
        
        otherActionsDoc :: Document;
        otherActionsDoc = defaultSqlBuilderFunctions.buildAlterTableStatement builder tableRef otherActions;
    in
        Sql.buildCompoundStatement builder $ otherActionsDoc : List.map addIndexDoc addIndexActions ++ List.map dropIndexDoc dropIndexActions;

postgreSql_buildAlterTableAction :: SqlBuilder -> AlterTableAction -> Document;
postgreSql_buildAlterTableAction !builder !action = 
    case action of
    AlterTableAction_ModifyColumnType {columnDesc} -> 
        // TODO: should this also set the NULL option?
        spread [text "ALTER COLUMN", text $ DatabaseMetadata.getFieldName columnDesc, text "TYPE", postgreSql_buildFieldType $ DatabaseMetadata.getFieldDataType columnDesc];
    _ -> 
        defaultSqlBuilderFunctions.buildAlterTableAction builder action;
    ;

/** Omit the 'CONSTRAINT' keyword if no name is provided. */
postgreSq_buildTableConstraint :: SqlBuilder -> Maybe String -> TableConstraint -> Document;
postgreSq_buildTableConstraint !builder !maybeConstraintName !constraint = 
    let
        keywordAndNameText = 
            case maybeConstraintName of
            Nothing -> empty;
            Just name -> text "CONSTRAINT" ++ singleSpace ++ text name ++ singleSpace;
            ;
    in
        case constraint of
        PrimaryKeyConstraint {primaryKeyFieldNames} -> 
            if isEmpty primaryKeyFieldNames then empty
            else keywordAndNameText ++ text "PRIMARY KEY" ++ singleSpace 
                ++ text "(" ++ List.join (text ", ") (List.map (Sql.quoteIdentifier builder) primaryKeyFieldNames) ++ text ")";
    
        UniqueConstraint {uniqueFieldNames} -> 
            if isEmpty uniqueFieldNames then empty
            else keywordAndNameText ++ text "UNIQUE" ++ singleSpace 
                ++ text "(" ++ List.join (text ", ") (List.map (Sql.quoteIdentifier builder) uniqueFieldNames) ++ text ")";
    
        ForeignKeyConstraint {foreignTableRef, referencedFields} -> 
            if isEmpty referencedFields then empty
            else keywordAndNameText ++ text "FOREIGN KEY" ++ singleSpace 
                ++ text "(" ++ List.join (text ", ") (List.map (\pr -> Sql.quoteIdentifier builder pr.#1) referencedFields) ++ text ")"
                ++ singleSpace ++ text "REFERENCES" ++ singleSpace ++ Sql.quoteIdentifier builder (getTableNameFromReference foreignTableRef) ++ singleSpace 
                ++ text "(" ++ List.join(text ", ") (List.map (\pr -> Sql.quoteIdentifier builder pr.#2) referencedFields) ++ text ")";
        ;

