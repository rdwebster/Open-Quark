/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * Map_Tests.cal
 * Creation date: May 4, 2006.
 * By: Raymond Cypher
 */

/**
 * This module contains test cases for the {@link module = Map@} module.
 *
 * Note that *examples functions can and should still go into the Map module itself. This is a place
 * for more involved and QA style tests that can not reasonably be considered "examples".
 * 
 * @author Peter Cardwell
 */
module Cal.Test.Collections.Map_Tests;

import Cal.Core.Prelude using
typeClass = Ord;
    typeConstructor = Boolean, Char, Double, Int, String;
    function = assert, downFrom, equals, fst, lessThan, lessThanEquals, not, seq, snd, upFromTo;
    dataConstructor = Just, Nothing;
    ;
import Cal.Collections.List using
    function = foldLeftStrict, take;
    ;
import Cal.Collections.Map using
    typeConstructor = Map;
    function =
        ceilingAssoc, delete, difference, empty, filter, filterWithKey, find, floorAssoc, fromDistinctAscList, fromList,
        higherAssoc, insert, insertWith, intersection, isSubmapBy, lookupInsert, lowerAssoc, partition, toList, union, unionWith;
    ;

//{-
//{--------------------------------------------------------------------
//Testing
//--------------------------------------------------------------------}
//testTree xs   = fromList [(x,"*") | x <- xs]
//test1 = testTree [1..20]
//test2 = testTree [30,29..10]
//test3 = testTree [1,4,6,89,2323,53,43,234,5,79,12,9,24,9,8,423,8,42,4,8,9,3]

testTree :: Ord a => [a] -> Map a String;
private testTree xs = fromList (List.map (\x -> (x, "*")) xs);

test1 :: Map Int String;
private test1 = testTree (upFromTo 1 20);

test2 :: Map Int String;
private test2 = testTree (take 21 (downFrom 30));

test3 :: Map Int String;
private test3 = testTree [1,4,6,89,2323,53,43,234,5,79,12,9,24,9,8,423,8,42,4,8,9,3];

test4 :: Map Int String;
private test4 = testTree (upFromTo 1 10000);

//
//{--------------------------------------------------------------------
//QuickCheck
//--------------------------------------------------------------------}
//qcheck prop
//= check config prop
//where
//  config = Config
//    { configMaxTest = 500
//    , configMaxFail = 5000
//    , configSize    = \n -> (div n 2 + 3)
//    , configEvery   = \n args -> let s = show n in s ++ [ '\b' | _ <- s ]
//    }
//
//
//{--------------------------------------------------------------------
//Arbitrary, reasonably balanced trees
//--------------------------------------------------------------------}
//instance (Enum k,Arbitrary a) => Arbitrary (Map k a) where
//arbitrary = sized (arbtree 0 maxkey)
//          where maxkey  = 10000
//
//arbtree :: (Enum k,Arbitrary a) => Int -> Int -> Int -> Gen (Map k a)
//arbtree lo hi n
//| n <= 0        = return Tip
//| lo >= hi      = return Tip
//| otherwise     = do{ x  <- arbitrary 
//                    ; i  <- choose (lo,hi)
//                    ; m  <- choose (1,30)
//                    ; let (ml,mr)  | m==(1::Int)= (1,2)
//                                   | m==2       = (2,1)
//                                   | m==3       = (1,1)
//                                   | otherwise  = (2,2)
//                    ; l  <- arbtree lo (i-1) (n `div` ml)
//                    ; r  <- arbtree (i+1) hi (n `div` mr)
//                    ; return (bin (toEnum i) x l r)
//                    }  
//
//
//{--------------------------------------------------------------------
//Valid tree's
//--------------------------------------------------------------------}
//forValid :: (Show k,Enum k,Show a,Arbitrary a,Testable b) => (Map k a -> b) -> Property
//forValid f
//= forAll arbitrary $ \t -> 
//--    classify (balanced t) "balanced" $
//  classify (size t == 0) "empty" $
//  classify (size t > 0  && size t <= 10) "small" $
//  classify (size t > 10 && size t <= 64) "medium" $
//  classify (size t > 64) "large" $
//  balanced t ==> f t
//
//forValidIntTree :: Testable a => (Map Int Int -> a) -> Property
//forValidIntTree f
//= forValid f
//
//forValidUnitTree :: Testable a => (Map Int () -> a) -> Property
//forValidUnitTree f
//= forValid f
//
//
//prop_Valid 
//= forValidUnitTree $ \t -> valid t
//
//{--------------------------------------------------------------------
//Single, Insert, Delete
//--------------------------------------------------------------------}
//prop_Single :: Int -> Int -> Bool
//prop_Single k x
//= (insert k x empty == single k x)
//
//prop_InsertValid :: Int -> Property
//prop_InsertValid k
//= forValidUnitTree $ \t -> valid (insert k () t)
//
//prop_InsertDelete :: Int -> Map Int () -> Property
//prop_InsertDelete k t
//= (lookup k t == Nothing) ==> delete k (insert k () t) == t
//
//prop_DeleteValid :: Int -> Property
//prop_DeleteValid k
//= forValidUnitTree $ \t -> 
//  valid (delete k (insert k () t))
//
//{--------------------------------------------------------------------
//Balance
//--------------------------------------------------------------------}
//prop_Join :: Int -> Property 
//prop_Join k 
//= forValidUnitTree $ \t ->
//  let (l,r) = split k t
//  in valid (join k () l r)
//
//prop_Merge :: Int -> Property 
//prop_Merge k
//= forValidUnitTree $ \t ->
//  let (l,r) = split k t
//  in valid (merge l r)
//
//
//{--------------------------------------------------------------------
//Union
//--------------------------------------------------------------------}
//prop_UnionValid :: Property
//prop_UnionValid
//= forValidUnitTree $ \t1 ->
//  forValidUnitTree $ \t2 ->
//  valid (union t1 t2)
//
//prop_UnionInsert :: Int -> Int -> Map Int Int -> Bool
//prop_UnionInsert k x t
//= union (single k x) t == insert k x t
//
//prop_UnionAssoc :: Map Int Int -> Map Int Int -> Map Int Int -> Bool
//prop_UnionAssoc t1 t2 t3
//= union t1 (union t2 t3) == union (union t1 t2) t3
//
//prop_UnionComm :: Map Int Int -> Map Int Int -> Bool
//prop_UnionComm t1 t2
//= (union t1 t2 == unionWith (\x y -> y) t2 t1)
//
//prop_UnionWithValid 
//= forValidIntTree $ \t1 ->
//  forValidIntTree $ \t2 ->
//  valid (unionWithKey (\k x y -> x+y) t1 t2)
//
//prop_UnionWith :: [(Int,Int)] -> [(Int,Int)] -> Bool
//prop_UnionWith xs ys
//= sum (elems (unionWith (+) (fromListWith (+) xs) (fromListWith (+) ys))) 
//  == (sum (List.map snd xs) + sum (List.map snd ys))
//
//prop_DiffValid
//= forValidUnitTree $ \t1 ->
//  forValidUnitTree $ \t2 ->
//  valid (difference t1 t2)
//
//prop_Diff :: [(Int,Int)] -> [(Int,Int)] -> Bool
//prop_Diff xs ys
//=  List.sort (keys (difference (fromListWith (+) xs) (fromListWith (+) ys))) 
//  == List.sort ((List.\\) (nub (List.map fst xs))  (nub (List.map fst ys)))
//
//prop_IntValid
//= forValidUnitTree $ \t1 ->
//  forValidUnitTree $ \t2 ->
//  valid (intersection t1 t2)
//
//prop_Int :: [(Int,Int)] -> [(Int,Int)] -> Bool
//prop_Int xs ys
//=  List.sort (keys (intersection (fromListWith (+) xs) (fromListWith (+) ys))) 
//  == List.sort (nub ((List.intersect) (List.map fst xs)  (List.map fst ys)))
//
//{--------------------------------------------------------------------
//Lists
//--------------------------------------------------------------------}
//prop_Ordered
//= forAll (choose (5,100)) $ \n ->
//  let xs = [(x,()) | x <- [0..n::Int]] 
//  in fromAscList xs == fromList xs
//
//prop_List :: [Int] -> Bool
//prop_List xs
//= (sort (nub xs) == [x | (x,()) <- toList (fromList [(x,()) | x <- xs])])
//-}

      
sampleMap0To9 :: Map Int String;
sampleMap0To9 = fromList [(0, "zero"), (1, "one"), (2, "two"), (3, "three"), (4, "four"), (5, "five"), (6, "six"), (7, "seven"), (8, "eight"), (9, "nine")];

sampleMap10To19 :: Map Int String;
sampleMap10To19 = fromList [(10, "ten"), (11, "eleven"), (12, "twelve"), (13, "thirteen"), (14, "fourteen"), (15, "fifteen"), (16, "sixteen"), (17, "seventeen"), (18, "eighteen"), (19, "nineteen")];

sampleMap4To13 :: Map Int String;
sampleMap4To13 = fromList [(4, "four"), (5, "five"), (6, "six"), (7, "seven"), (8, "eight"), (9, "nine"), (10, "ten"), (11, "eleven"), (12, "twelve"), (13, "thirteen")];


//makes the map from an Int value to the name of its last digit e.g. (25, "five") where the keys range from 1 to mapSize.
makeLastDigitMap :: Int -> Map Int String;
makeLastDigitMap !mapSize =
  let
      keys :: [Int];
      keys = upFromTo 1 mapSize;
      
      values :: [String];
      values = List.map (\n -> find (n % 10) sampleMap0To9) keys;
  in
      fromList (List.zip keys values);
  
sampleMapLastDigit :: Map Int String;
sampleMapLastDigit = makeLastDigitMap 100;

multsOfThreeMap :: Int -> Map Int Int;
multsOfThreeMap !size =
  let
      nums :: [Int];
      nums = upFromTo 1 size;
      
      mults :: [Int];
      mults = List.map (\n -> n*3) nums;
  in
      fromDistinctAscList (List.zip mults mults);
  
  
randMultsOfThreeMap :: Int -> Map Int Int;
randMultsOfThreeMap !size =
  let
      nums :: [Int];
      nums = upFromTo 1 size;
      
      mults :: [Int];
      mults = List.map (\n -> ((n*n*30696) % 65521) * 3) nums;
  in
      fromList (List.zip mults mults);
  
multsOfTwoMap :: Int -> Map Int Int;
multsOfTwoMap !size =
  let
      nums :: [Int];
      nums = upFromTo 1 size;
      
      mults :: [Int];
      mults = List.map (\n -> n*2) nums;
  in
      fromDistinctAscList (List.zip mults mults);

randMultsOfTwoMap :: Int -> Map Int Int;
randMultsOfTwoMap !size =
  let
      nums :: [Int];
      nums = upFromTo 1 size;
      
      mults :: [Int];
      mults = List.map (\n -> ((n*n*30696) % 65521) * 2) nums;
  in
      fromList (List.zip mults mults);
  
multsOfTwo400000 :: [Int];
multsOfTwo400000 = List.map (\n -> n*2) (upFromTo 1 400000);

multsOfThree400000 :: [Int];
multsOfThree400000 = List.map (\n -> n*3) (upFromTo 1 400000);

multsOfTwoMap50000 :: Map Int Int;
multsOfTwoMap50000 = multsOfTwoMap 50000;

multsOfTwoMap400000 :: Map Int Int;
multsOfTwoMap400000 = multsOfTwoMap 400000;

multsOfThreeMap50000 :: Map Int Int;
multsOfThreeMap50000 = multsOfThreeMap 50000;

multsOfThreeMap400000 :: Map Int Int;
multsOfThreeMap400000 = multsOfThreeMap 400000;    

randMultsOfTwoMap50000 :: Map Int Int;
randMultsOfTwoMap50000 = randMultsOfTwoMap 50000;

randMultsOfTwoMap400000 :: Map Int Int;
randMultsOfTwoMap400000 = randMultsOfTwoMap 400000;

randMultsOfThreeMap50000 :: Map Int Int;
randMultsOfThreeMap50000 = randMultsOfThreeMap 50000;

randMultsOfThreeMap400000 :: Map Int Int;
randMultsOfThreeMap400000 = randMultsOfThreeMap 400000;
  
  
unionBenchmark :: Int -> Map Int Int;
unionBenchmark uselessParam = union (multsOfTwoMap400000) (multsOfThreeMap400000);

unionBenchmark2 :: Int -> Map Int Int;
unionBenchmark2 uselessParam = union (randMultsOfTwoMap400000) (randMultsOfTwoMap400000);

intersectionBenchmark :: Int -> Map Int Int;
intersectionBenchmark uselessParam = intersection (multsOfTwoMap400000) (multsOfThreeMap400000);

intersectionBenchmark2 :: Int -> Map Int Int;
intersectionBenchmark2 uselessParam = intersection (randMultsOfTwoMap400000) (randMultsOfThreeMap400000);

lookupBenchmarkHelper :: Map Prelude.Long Prelude.Long;
lookupBenchmarkHelper =
  let
      nums :: [Prelude.Long];
      nums = upFromTo (-25000) 25000;
      
      mults :: [Prelude.Long];
      mults = List.map (\n -> Prelude.abs(n*2)) nums;
  in
      fromDistinctAscList (List.zip nums mults);

lookupBenchmark :: Int -> Prelude.Long;
lookupBenchmark uselessParam =
      List.foldLeft1Strict Prelude.add (List.map (\y -> find y lookupBenchmarkHelper) (upFromTo (-25000) (25000::Prelude.Long)));

filterBenchmark :: Int -> Map Int Int;
filterBenchmark uselessParam =
  filter (\a -> (a % 3) == 0) (multsOfTwoMap400000);

partitionBenchmark :: Int -> Map Int Int;
partitionBenchmark uselessParam =
  let
      part :: (Map Int Int, Map Int Int);
      part = (partition (\a -> (a % 3) == 0) (multsOfTwoMap400000));
  in
      seq (fst part) (snd part);    

deleteBenchmark :: Int -> Map Int Int;
deleteBenchmark uselessParam =
  let
      del :: Map Int Int -> Int -> Map Int Int;
      del m k = delete k m;
  in
      foldLeftStrict del multsOfTwoMap400000 multsOfThree400000;

runBench :: a -> Int;
runBench !abc = 0;

//a list generator used to build a map from an Int value to the Int value % 10.
//mainly for testing purposes.
modList :: Int -> [(Int, Int)];
private modList !n =
  let
      keys :: [Int];
      keys = upFromTo 1 n;
      
      values :: [Int];
      values = List.map (\!n -> n % 10) keys;
  in
      List.zip keys values;

//a list generator used to build a map from an Int value to itself.
//mainly for testing purposes.        
mapList :: Int -> [(Int, Int)];
private mapList !n =
  let
      keys :: [Int];
      keys = upFromTo 1 n;    
  in
      List.zip keys keys;    
      
                          
insertTests :: Boolean;
private insertTests =
    //insert into an empty map     
    assert (insert 1 "January" empty == fromList [((1 :: Int), "January")])
    && assert (insert 2 "February" (fromList [(1, "January")]) == fromList [((1 :: Int), "January"), (2, "February")])
    && assert (insert 1 "January" (fromList [(2, "February")]) == fromList [((1 :: Int), "January"), (2, "February")])
    //insert into a map where the key already exists overwrites with the new value
    && assert (insert 1 "Aardvark" (fromList [((1 :: Int), "January"), (2, "February")]) == fromList [((1 :: Int), "Aardvark"), (2, "February")])
    && assert (insert 10 "ten" sampleMap0To9 == fromList ((10 :: Int, "ten") : toList sampleMap0To9))
    && assert (insert (-1) "negative one" sampleMap0To9 == fromList (((-1 :: Int), "negative one") : toList sampleMap0To9))    
    ;


insertWithTests :: Boolean;
private insertWithTests = 
    assert (find 5 (insertWith Prelude.append 5 "Canada" sampleMap0To9) == "Canadafive")
    && assert (find 10 (insertWith Prelude.append 10 "France" sampleMap0To9) == "France")
    ;
  
unionTests :: Boolean;
unionTests =
    assert (union sampleMap0To9 sampleMap10To19 == fromList ((toList sampleMap0To9) ++ (toList sampleMap10To19)))
    && assert (union sampleMap0To9 sampleMap10To19 ==  union sampleMap10To19 sampleMap0To9)
    && assert (union sampleMap0To9 sampleMap0To9 == sampleMap0To9)
    && assert (union sampleMap0To9 (fromList [(3, "zebra")]) == sampleMap0To9)
    && assert (union (fromList [(3, "zebra")]) sampleMap0To9 == insert 3 "zebra" sampleMap0To9)
    ;

/**
 * Test that unionWith generates expected results.
 */
unionWithTests :: Boolean;
unionWithTests = 
    assert (unionWith Prelude.append sampleMap0To9 sampleMap0To9 ==  fromList [(0, "zerozero"), (1, "oneone"), (2, "twotwo"), (3, "threethree"), (4, "fourfour"), (5, "fivefive"), (6, "sixsix"), (7, "sevenseven"), (8, "eighteight"), (9, "ninenine")])
    && assert (unionWith Prelude.append sampleMap0To9 sampleMap10To19 == union sampleMap0To9 sampleMap10To19)
    && assert (unionWith Prelude.append sampleMap0To9 sampleMap4To13 == unionWith Prelude.append sampleMap4To13 sampleMap0To9)
    && assert (unionWith Prelude.append (fromList[(3, "zebra")]) sampleMap0To9 == insertWith Prelude.append 3 "zebra" sampleMap0To9)
    && assert (unionWith Prelude.append sampleMap0To9 (fromList[(3, "zebra")]) != insertWith Prelude.append 3 "zebra" sampleMap0To9)
    ;

isSubmapByTests :: Boolean;
isSubmapByTests =
    let
        m :: Map Char Int;
        m = fromList [('a', 1), ('b', 2)];
    in
        assert (isSubmapBy equals (fromList [('a', 1)]) m)
        && assert (isSubmapBy lessThanEquals (fromList [('a', 1)]) m)   
        && assert (isSubmapBy equals m m)
        && assert (not (isSubmapBy equals (fromList [('a', 2)]) m))
        && assert (not (isSubmapBy lessThan (fromList [('a', 1)]) m))
        && assert (not (isSubmapBy equals m (fromList [('a', 1)])))
        ;


differenceTests :: Boolean;
differenceTests =
    let
        e :: Map Int String;
        e = empty;
    in
        assert (difference sampleMap0To9 sampleMap0To9 == empty)
        && assert (difference sampleMap0To9 empty == sampleMap0To9)
        && assert (difference e sampleMap0To9 == e)
        && assert (difference sampleMap0To9 (filterWithKey (\k v -> Prelude.isEven k) sampleMap0To9)
            == fromList [(1, "one"), (3, "three"), (5, "five"), (7, "seven"), (9, "nine")])
        ;    


nearestKeyTests :: Boolean;
nearestKeyTests = 
    let
        nearestKeyMap :: Map Double String;
        nearestKeyMap = fromList [(0, "zero"), (1, "one"), (2, "two"), (3, "three"), (4, "four"), (5, "five")];
    in
        assert (floorAssoc (-1) nearestKeyMap == Nothing)
        && assert (floorAssoc 0   nearestKeyMap == Just (0, "zero"))
        && assert (floorAssoc 0.5 nearestKeyMap == Just (0, "zero"))
        && assert (floorAssoc 1   nearestKeyMap == Just (1, "one"))
        && assert (floorAssoc 1.5 nearestKeyMap == Just (1, "one"))
        && assert (floorAssoc 2   nearestKeyMap == Just (2, "two"))
        && assert (floorAssoc 2.5 nearestKeyMap == Just (2, "two"))
        && assert (floorAssoc 3   nearestKeyMap == Just (3, "three"))
        && assert (floorAssoc 3.5 nearestKeyMap == Just (3, "three"))
        && assert (floorAssoc 4   nearestKeyMap == Just (4, "four"))
        && assert (floorAssoc 4.5 nearestKeyMap == Just (4, "four"))
        && assert (floorAssoc 5   nearestKeyMap == Just (5, "five"))
        && assert (floorAssoc 5.5 nearestKeyMap == Just (5, "five"))
    
        && assert (lowerAssoc (-1) nearestKeyMap == Nothing)
        && assert (lowerAssoc 0   nearestKeyMap == Nothing)
        && assert (lowerAssoc 0.5 nearestKeyMap == Just (0, "zero"))
        && assert (lowerAssoc 1   nearestKeyMap == Just (0, "zero"))
        && assert (lowerAssoc 1.5 nearestKeyMap == Just (1, "one"))
        && assert (lowerAssoc 2   nearestKeyMap == Just (1, "one"))
        && assert (lowerAssoc 2.5 nearestKeyMap == Just (2, "two"))
        && assert (lowerAssoc 3   nearestKeyMap == Just (2, "two"))
        && assert (lowerAssoc 3.5 nearestKeyMap == Just (3, "three"))
        && assert (lowerAssoc 4   nearestKeyMap == Just (3, "three"))
        && assert (lowerAssoc 4.5 nearestKeyMap == Just (4, "four"))
        && assert (lowerAssoc 5   nearestKeyMap == Just (4, "four"))
        && assert (lowerAssoc 5.5 nearestKeyMap == Just (5, "five"))
    
        && assert (ceilingAssoc (-1) nearestKeyMap == Just (0, "zero"))
        && assert (ceilingAssoc 0   nearestKeyMap == Just (0, "zero"))
        && assert (ceilingAssoc 0.5 nearestKeyMap == Just (1, "one"))
        && assert (ceilingAssoc 1   nearestKeyMap == Just (1, "one"))
        && assert (ceilingAssoc 1.5 nearestKeyMap == Just (2, "two"))
        && assert (ceilingAssoc 2   nearestKeyMap == Just (2, "two"))
        && assert (ceilingAssoc 2.5 nearestKeyMap == Just (3, "three"))
        && assert (ceilingAssoc 3   nearestKeyMap == Just (3, "three"))
        && assert (ceilingAssoc 3.5 nearestKeyMap == Just (4, "four"))
        && assert (ceilingAssoc 4   nearestKeyMap == Just (4, "four"))
        && assert (ceilingAssoc 4.5 nearestKeyMap == Just (5, "five"))
        && assert (ceilingAssoc 5   nearestKeyMap == Just (5, "five"))
        && assert (ceilingAssoc 5.5 nearestKeyMap == Nothing)
        
        && assert (higherAssoc (-1) nearestKeyMap == Just (0, "zero"))
        && assert (higherAssoc 0   nearestKeyMap == Just (1, "one"))
        && assert (higherAssoc 0.5 nearestKeyMap == Just (1, "one"))
        && assert (higherAssoc 1   nearestKeyMap == Just (2, "two"))
        && assert (higherAssoc 1.5 nearestKeyMap == Just (2, "two"))
        && assert (higherAssoc 2   nearestKeyMap == Just (3, "three"))
        && assert (higherAssoc 2.5 nearestKeyMap == Just (3, "three"))
        && assert (higherAssoc 3   nearestKeyMap == Just (4, "four"))
        && assert (higherAssoc 3.5 nearestKeyMap == Just (4, "four"))
        && assert (higherAssoc 4   nearestKeyMap == Just (5, "five"))
        && assert (higherAssoc 4.5 nearestKeyMap == Just (5, "five"))
        && assert (higherAssoc 5   nearestKeyMap == Nothing)
        && assert (higherAssoc 5.5 nearestKeyMap == Nothing)
        ;



/**
 * Tests for the insertUpdate function.
 */
insertUpdateTests :: Boolean;
insertUpdateTests = 
    let
        testCorrect :: Map Int Int;
        testCorrect = fromList $ List.map (\key -> (key,key+1)) $ [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
        
        test1 :: Map Int Int;
        test1 =            
            (\x -> x.#2) $ lookupInsert 11 12 $
            (\x -> x.#2) $ lookupInsert 10 11 $
            (\x -> x.#2) $ lookupInsert 14 15 $
            (\x -> x.#2) $ lookupInsert 12 13 $
            (\x -> x.#2) $ lookupInsert 15 16 $
            (\x -> x.#2) $ lookupInsert 8  9  $
            (\x -> x.#2) $ lookupInsert 13 14 $
            (\x -> x.#2) $ lookupInsert 9  10 $
            
            (\x -> x.#2) $ lookupInsert 4 5 $
            (\x -> x.#2) $ lookupInsert 5 6 $
            (\x -> x.#2) $ lookupInsert 6 7 $
            (\x -> x.#2) $ lookupInsert 7 8 $
            
            (\x -> x.#2) $ lookupInsert 3 4 $
            (\x -> x.#2) $ lookupInsert 2 3 $
            (\x -> x.#2) $ lookupInsert 1 2 $
            (\x -> x.#2) $ lookupInsert 0 1 $
            empty;
        
        test2 :: Map Int Int;
        test2 =
            (\x -> x.#2) $ lookupInsert 3 0 $
            (\x -> x.#2) $ lookupInsert 2 0 $
            (\x -> x.#2) $ lookupInsert 1 0 $
            (\x -> x.#2) $ lookupInsert 0 0 $
            test1;
        
        and :: [Boolean] -> Boolean;
        and xs = foldLeftStrict (\x y -> x && y) Prelude.True xs;
        
        fnValue key value = (\x->x.#1) $ lookupInsert key value $ test2;
        fnChanged key value = (\x->x.#3) $ lookupInsert key value $ test2;
    in
           assert (testCorrect == test1)
        && assert (testCorrect == test2)
        && assert (and $ List.map (\key -> fnValue key 0 == (key+1))         [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])
        && assert (and $ List.map (\key -> fnValue key 0 == 0)               [-21,-20,20,21])
        && assert (and $ List.map (\key -> fnChanged key 0 == Prelude.False) [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])
        && assert (and $ List.map (\key -> fnChanged key 0 == Prelude.True)  [-21,-20,20,21])
        ;  


/**
 * @return true if the testing predicates in this module all run successfully.
 */
testModule :: Boolean;
public testModule =
  assert insertTests 
  && assert insertWithTests
  && assert unionTests
  && assert unionWithTests
  && assert isSubmapByTests
  && assert differenceTests
  && assert nearestKeyTests
  && insertUpdateTests
  ;
//please leave testModule last!

